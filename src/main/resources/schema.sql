-- После проверки я удалю все комментарии, они лишь для peer-to-peer ревью
-- Удаляем таблицы, если они существуют, чтобы избежать ошибок
DROP TABLE IF EXISTS film_genres, likes, user_friends, films, users, mpa, genres;
-- Справочник MPA-рейтингов
CREATE TABLE IF NOT EXISTS mpa (
    mpa_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(10) NOT NULL
);

-- Справочник жанров
CREATE TABLE IF NOT EXISTS genres (
    genre_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(50) NOT NULL
);

-- Таблица фильмов
CREATE TABLE IF NOT EXISTS films (
    film_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    description VARCHAR(200),
    release_date DATE,
    duration INTEGER,
    mpa_id INTEGER,
    CONSTRAINT fk_mpa FOREIGN KEY(mpa_id) REFERENCES mpa(mpa_id)
);

-- Таблица пользователей
CREATE TABLE IF NOT EXISTS users (
    user_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email VARCHAR(100) NOT NULL,
    login VARCHAR(50) NOT NULL,
    name VARCHAR(50),
    birthday DATE
);

-- Таблица-связка для жанров фильмов (многие ко многим)
CREATE TABLE IF NOT EXISTS film_genres (
    film_id BIGINT NOT NULL,
    genre_id INTEGER NOT NULL,
    PRIMARY KEY (film_id, genre_id),
    CONSTRAINT fk_film_genres_film FOREIGN KEY(film_id) REFERENCES films(film_id),
    CONSTRAINT fk_film_genres_genre FOREIGN KEY(genre_id) REFERENCES genres(genre_id)
);

-- Таблица лайков (многие ко многим)
CREATE TABLE IF NOT EXISTS likes (
    film_id BIGINT NOT NULL,
    user_id BIGINT NOT NULL,
    PRIMARY KEY (film_id, user_id),
    CONSTRAINT fk_likes_film FOREIGN KEY(film_id) REFERENCES films(film_id),
    CONSTRAINT fk_likes_user FOREIGN KEY(user_id) REFERENCES users(user_id)
);

-- Таблица дружбы
CREATE TABLE IF NOT EXISTS user_friends (
    user_id BIGINT NOT NULL,
    friend_id BIGINT NOT NULL,
    PRIMARY KEY (user_id, friend_id),
    CONSTRAINT fk_user_friends_user FOREIGN KEY(user_id) REFERENCES users(user_id),
    CONSTRAINT fk_user_friends_friend FOREIGN KEY(friend_id) REFERENCES users(user_id)
);